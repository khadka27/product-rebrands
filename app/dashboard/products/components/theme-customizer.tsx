"use client";

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import type { ProductTheme } from "@/lib/models/product-theme";

const defaultTheme: ProductTheme = {
  theme_id: "", // Default value, will be generated by DB
  product_id: "", // Default value, will be set when linked to a product
  primary_bg_color: "#ffffff",
  secondary_bg_color: "#f44336",
  accent_bg_color: "#ffc107",
  primary_text_color: "#333333",
  secondary_text_color: "#666666",
  accent_text_color: "#ffc107",
  link_color: "#3182ce",
  link_hover_color: "#2c5282",
  primary_button_bg: "#ff5722",
  primary_button_text: "#ffffff",
  primary_button_hover_bg: "#f44336",
  secondary_button_bg: "#e0e0e0",
  secondary_button_text: "#333333",
  secondary_button_hover_bg: "#bdbdbd",
  card_bg_color: "#ffffff",
  card_border_color: "#e0e0e0",
  card_shadow_color: "#0000001a",
  header_bg_color: "#ffffff",
  header_text_color: "#111111",
  footer_bg_color: "#333333",
  footer_text_color: "#ffffff",
  font_family: "Inter, sans-serif",
  h1_font_size: "2.5rem",
  h1_font_weight: "700",
  h2_font_size: "2rem",
  h2_font_weight: "600",
  h3_font_size: "1.5rem",
  h3_font_weight: "500",
  body_font_size: "1rem",
  body_line_height: "1.5",
  section_padding: "2rem",
  card_padding: "1.5rem",
  button_padding: "0.75rem 1.5rem",
  border_radius_sm: "4px",
  border_radius_md: "8px",
  border_radius_lg: "12px",
  border_radius_xl: "16px",
  max_width: "1200px",
  container_padding: "1rem",
  gradient_start: "",
  gradient_end: "",
  shadow_color: "",
  custom_css: "",
};

const presetThemes = [
  {
    name: "Default",
    theme: defaultTheme,
  },
  {
    name: "Dark",
    theme: {
      theme_id: "",
      product_id: "",
      primary_bg_color: "#121212",
      secondary_bg_color: "#1e1e1e",
      accent_bg_color: "#ffc107",
      primary_text_color: "#e0e0e0",
      secondary_text_color: "#bdbdbd",
      accent_text_color: "#ffc107",
      link_color: "#90caf9",
      link_hover_color: "#64b5f6",
      primary_button_bg: "#ff5722",
      primary_button_text: "#ffffff",
      primary_button_hover_bg: "#f44336",
      secondary_button_bg: "#e0e0e0",
      secondary_button_text: "#333333",
      secondary_button_hover_bg: "#bdbdbd",
      card_bg_color: "#1e1e1e",
      card_border_color: "#333333",
      card_shadow_color: "#0000001a",
      header_bg_color: "#1e1e1e",
      header_text_color: "#ffffff",
      footer_bg_color: "#000000",
      footer_text_color: "#e0e0e0",
      font_family: "Inter, sans-serif",
      h1_font_size: "2.5rem",
      h1_font_weight: "700",
      h2_font_size: "2rem",
      h2_font_weight: "600",
      h3_font_size: "1.5rem",
      h3_font_weight: "500",
      body_font_size: "1rem",
      body_line_height: "1.5",
      section_padding: "2rem",
      card_padding: "1.5rem",
      button_padding: "0.75rem 1.5rem",
      border_radius_sm: "4px",
      border_radius_md: "8px",
      border_radius_lg: "12px",
      border_radius_xl: "16px",
      max_width: "1200px",
      container_padding: "1rem",
      gradient_start: "",
      gradient_end: "",
      shadow_color: "",
      custom_css: "",
    },
  },
  {
    name: "Blue",
    theme: {
      theme_id: "",
      product_id: "",
      primary_bg_color: "#2196f3",
      secondary_bg_color: "#1976d2",
      accent_bg_color: "#03a9f4",
      primary_text_color: "#333333",
      secondary_text_color: "#666666",
      accent_text_color: "#03a9f4",
      link_color: "#0d47a1",
      link_hover_color: "#1565c0",
      primary_button_bg: "#2196f3",
      primary_button_text: "#ffffff",
      primary_button_hover_bg: "#1976d2",
      secondary_button_bg: "#e0e0e0",
      secondary_button_text: "#333333",
      secondary_button_hover_bg: "#bdbdbd",
      card_bg_color: "#ffffff",
      card_border_color: "#e0e0e0",
      card_shadow_color: "#0000001a",
      header_bg_color: "#2196f3",
      header_text_color: "#ffffff",
      footer_bg_color: "#1976d2",
      footer_text_color: "#ffffff",
      font_family: "Inter, sans-serif",
      h1_font_size: "2.5rem",
      h1_font_weight: "700",
      h2_font_size: "2rem",
      h2_font_weight: "600",
      h3_font_size: "1.5rem",
      h3_font_weight: "500",
      body_font_size: "1rem",
      body_line_height: "1.5",
      section_padding: "2rem",
      card_padding: "1.5rem",
      button_padding: "0.75rem 1.5rem",
      border_radius_sm: "4px",
      border_radius_md: "8px",
      border_radius_lg: "12px",
      border_radius_xl: "16px",
      max_width: "1200px",
      container_padding: "1rem",
      gradient_start: "",
      gradient_end: "",
      shadow_color: "",
      custom_css: "",
    },
  },
  {
    name: "Green",
    theme: {
      theme_id: "",
      product_id: "",
      primary_bg_color: "#4caf50",
      secondary_bg_color: "#388e3c",
      accent_bg_color: "#8bc34a",
      primary_text_color: "#333333",
      secondary_text_color: "#666666",
      accent_text_color: "#8bc34a",
      link_color: "#1b5e20",
      link_hover_color: "#2e7d32",
      primary_button_bg: "#4caf50",
      primary_button_text: "#ffffff",
      primary_button_hover_bg: "#388e3c",
      secondary_button_bg: "#e0e0e0",
      secondary_button_text: "#333333",
      secondary_button_hover_bg: "#bdbdbd",
      card_bg_color: "#ffffff",
      card_border_color: "#e0e0e0",
      card_shadow_color: "#0000001a",
      header_bg_color: "#4caf50",
      header_text_color: "#ffffff",
      footer_bg_color: "#1b5e20",
      footer_text_color: "#ffffff",
      font_family: "Inter, sans-serif",
      h1_font_size: "2.5rem",
      h1_font_weight: "700",
      h2_font_size: "2rem",
      h2_font_weight: "600",
      h3_font_size: "1.5rem",
      h3_font_weight: "500",
      body_font_size: "1rem",
      body_line_height: "1.5",
      section_padding: "2rem",
      card_padding: "1.5rem",
      button_padding: "0.75rem 1.5rem",
      border_radius_sm: "4px",
      border_radius_md: "8px",
      border_radius_lg: "12px",
      border_radius_xl: "16px",
      max_width: "1200px",
      container_padding: "1rem",
      gradient_start: "",
      gradient_end: "",
      shadow_color: "",
      custom_css: "",
    },
  },
];

interface ThemeCustomizerProps {
  initialTheme?: ProductTheme;
  onChange: (theme: ProductTheme) => void;
}

export function ThemeCustomizer({
  initialTheme = defaultTheme,
  onChange,
}: ThemeCustomizerProps) {
  const [theme, setTheme] = useState<ProductTheme>(
    initialTheme || defaultTheme
  );

  const handleChange = (key: keyof ProductTheme, value: string) => {
    const updatedTheme = { ...theme, [key]: value };
    setTheme(updatedTheme);
    onChange(updatedTheme);
  };

  const applyPreset = (presetTheme: ProductTheme) => {
    // Ensure all properties from current theme are preserved if not in preset
    const mergedTheme = { ...theme, ...presetTheme };
    setTheme(mergedTheme);
    onChange(mergedTheme);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Theme Customization</CardTitle>
        <CardDescription>
          Customize the appearance of your product page
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="presets">
          <TabsList className="mb-4">
            <TabsTrigger value="presets">Presets</TabsTrigger>
            <TabsTrigger value="colors">Colors</TabsTrigger>
            <TabsTrigger value="typography">Typography</TabsTrigger>
            <TabsTrigger value="advanced">Advanced</TabsTrigger>
          </TabsList>

          <TabsContent value="presets">
            <div className="grid grid-cols-2 gap-4 mb-4">
              {presetThemes.map((preset) => (
                <Button
                  key={preset.name}
                  variant="outline"
                  className="h-auto p-4 flex flex-col items-center justify-center gap-2"
                  onClick={() => applyPreset(preset.theme)}
                >
                  <div className="flex gap-1">
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{
                        backgroundColor: preset.theme
                          .primary_bg_color as React.CSSProperties["backgroundColor"],
                      }}
                    ></div>
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{
                        backgroundColor: preset.theme
                          .secondary_bg_color as React.CSSProperties["backgroundColor"],
                      }}
                    ></div>
                    <div
                      className="w-4 h-4 rounded-full"
                      style={{
                        backgroundColor: preset.theme
                          .accent_bg_color as React.CSSProperties["backgroundColor"],
                      }}
                    ></div>
                  </div>
                  <span>{preset.name}</span>
                </Button>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="colors">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="primary_bg_color">Primary Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="primary_bg_color"
                    type="color"
                    value={theme.primary_bg_color}
                    onChange={(e) =>
                      handleChange("primary_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.primary_bg_color}
                    onChange={(e) =>
                      handleChange("primary_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="secondary_bg_color">Secondary Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="secondary_bg_color"
                    type="color"
                    value={theme.secondary_bg_color}
                    onChange={(e) =>
                      handleChange("secondary_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.secondary_bg_color}
                    onChange={(e) =>
                      handleChange("secondary_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="accent_bg_color">Accent Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="accent_bg_color"
                    type="color"
                    value={theme.accent_bg_color}
                    onChange={(e) =>
                      handleChange("accent_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.accent_bg_color}
                    onChange={(e) =>
                      handleChange("accent_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="primary_text_color">Primary Text Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="primary_text_color"
                    type="color"
                    value={theme.primary_text_color}
                    onChange={(e) =>
                      handleChange("primary_text_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.primary_text_color}
                    onChange={(e) =>
                      handleChange("primary_text_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="secondary_text_color">
                  Secondary Text Color
                </Label>
                <div className="flex gap-2">
                  <Input
                    id="secondary_text_color"
                    type="color"
                    value={theme.secondary_text_color}
                    onChange={(e) =>
                      handleChange("secondary_text_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.secondary_text_color}
                    onChange={(e) =>
                      handleChange("secondary_text_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="accent_text_color">Accent Text Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="accent_text_color"
                    type="color"
                    value={theme.accent_text_color}
                    onChange={(e) =>
                      handleChange("accent_text_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.accent_text_color}
                    onChange={(e) =>
                      handleChange("accent_text_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="header_bg_color">Header Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="header_bg_color"
                    type="color"
                    value={theme.header_bg_color}
                    onChange={(e) =>
                      handleChange("header_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.header_bg_color}
                    onChange={(e) =>
                      handleChange("header_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="header_text_color">Header Text</Label>
                <div className="flex gap-2">
                  <Input
                    id="header_text_color"
                    type="color"
                    value={theme.header_text_color}
                    onChange={(e) =>
                      handleChange("header_text_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.header_text_color}
                    onChange={(e) =>
                      handleChange("header_text_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="primary_button_bg">
                  Primary Button Background
                </Label>
                <div className="flex gap-2">
                  <Input
                    id="primary_button_bg"
                    type="color"
                    value={theme.primary_button_bg}
                    onChange={(e) =>
                      handleChange("primary_button_bg", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.primary_button_bg}
                    onChange={(e) =>
                      handleChange("primary_button_bg", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="primary_button_text">Primary Button Text</Label>
                <div className="flex gap-2">
                  <Input
                    id="primary_button_text"
                    type="color"
                    value={theme.primary_button_text}
                    onChange={(e) =>
                      handleChange("primary_button_text", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.primary_button_text}
                    onChange={(e) =>
                      handleChange("primary_button_text", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="secondary_button_bg">
                  Secondary Button Background
                </Label>
                <div className="flex gap-2">
                  <Input
                    id="secondary_button_bg"
                    type="color"
                    value={theme.secondary_button_bg}
                    onChange={(e) =>
                      handleChange("secondary_button_bg", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.secondary_button_bg}
                    onChange={(e) =>
                      handleChange("secondary_button_bg", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="secondary_button_text">
                  Secondary Button Text
                </Label>
                <div className="flex gap-2">
                  <Input
                    id="secondary_button_text"
                    type="color"
                    value={theme.secondary_button_text}
                    onChange={(e) =>
                      handleChange("secondary_button_text", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.secondary_button_text}
                    onChange={(e) =>
                      handleChange("secondary_button_text", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="card_bg_color">Card Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="card_bg_color"
                    type="color"
                    value={theme.card_bg_color}
                    onChange={(e) =>
                      handleChange("card_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.card_bg_color}
                    onChange={(e) =>
                      handleChange("card_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="card_border_color">Card Border Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="card_border_color"
                    type="color"
                    value={theme.card_border_color}
                    onChange={(e) =>
                      handleChange("card_border_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.card_border_color}
                    onChange={(e) =>
                      handleChange("card_border_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="card_shadow_color">Card Shadow Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="card_shadow_color"
                    type="color"
                    value={theme.card_shadow_color}
                    onChange={(e) =>
                      handleChange("card_shadow_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.card_shadow_color}
                    onChange={(e) =>
                      handleChange("card_shadow_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="link_color">Link Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="link_color"
                    type="color"
                    value={theme.link_color}
                    onChange={(e) => handleChange("link_color", e.target.value)}
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.link_color}
                    onChange={(e) => handleChange("link_color", e.target.value)}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="link_hover_color">Link Hover Color</Label>
                <div className="flex gap-2">
                  <Input
                    id="link_hover_color"
                    type="color"
                    value={theme.link_hover_color}
                    onChange={(e) =>
                      handleChange("link_hover_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.link_hover_color}
                    onChange={(e) =>
                      handleChange("link_hover_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="footer_bg_color">Footer Background</Label>
                <div className="flex gap-2">
                  <Input
                    id="footer_bg_color"
                    type="color"
                    value={theme.footer_bg_color}
                    onChange={(e) =>
                      handleChange("footer_bg_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.footer_bg_color}
                    onChange={(e) =>
                      handleChange("footer_bg_color", e.target.value)
                    }
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="footer_text_color">Footer Text</Label>
                <div className="flex gap-2">
                  <Input
                    id="footer_text_color"
                    type="color"
                    value={theme.footer_text_color}
                    onChange={(e) =>
                      handleChange("footer_text_color", e.target.value)
                    }
                    className="w-12 h-10 p-1"
                  />
                  <Input
                    type="text"
                    value={theme.footer_text_color}
                    onChange={(e) =>
                      handleChange("footer_text_color", e.target.value)
                    }
                  />
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="typography">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="font_family">Font Family</Label>
                <select
                  id="font_family"
                  value={theme.font_family}
                  onChange={(e) => handleChange("font_family", e.target.value)}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="Inter, sans-serif">Inter</option>
                  <option value="'Roboto', sans-serif">Roboto</option>
                  <option value="'Open Sans', sans-serif">Open Sans</option>
                  <option value="'Montserrat', sans-serif">Montserrat</option>
                  <option value="'Poppins', sans-serif">Poppins</option>
                  <option value="'Lato', sans-serif">Lato</option>
                  <option value="'Oswald', sans-serif">Oswald</option>
                  <option value="'Playfair Display', serif">
                    Playfair Display
                  </option>
                </select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="h1_font_size">H1 Font Size</Label>
                <Input
                  id="h1_font_size"
                  type="text"
                  value={theme.h1_font_size}
                  onChange={(e) => handleChange("h1_font_size", e.target.value)}
                  placeholder="2.5rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="h1_font_weight">H1 Font Weight</Label>
                <Input
                  id="h1_font_weight"
                  type="text"
                  value={theme.h1_font_weight}
                  onChange={(e) =>
                    handleChange("h1_font_weight", e.target.value)
                  }
                  placeholder="700"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="h2_font_size">H2 Font Size</Label>
                <Input
                  id="h2_font_size"
                  type="text"
                  value={theme.h2_font_size}
                  onChange={(e) => handleChange("h2_font_size", e.target.value)}
                  placeholder="2rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="h2_font_weight">H2 Font Weight</Label>
                <Input
                  id="h2_font_weight"
                  type="text"
                  value={theme.h2_font_weight}
                  onChange={(e) =>
                    handleChange("h2_font_weight", e.target.value)
                  }
                  placeholder="600"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="h3_font_size">H3 Font Size</Label>
                <Input
                  id="h3_font_size"
                  type="text"
                  value={theme.h3_font_size}
                  onChange={(e) => handleChange("h3_font_size", e.target.value)}
                  placeholder="1.5rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="h3_font_weight">H3 Font Weight</Label>
                <Input
                  id="h3_font_weight"
                  type="text"
                  value={theme.h3_font_weight}
                  onChange={(e) =>
                    handleChange("h3_font_weight", e.target.value)
                  }
                  placeholder="500"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="body_font_size">Body Font Size</Label>
                <Input
                  id="body_font_size"
                  type="text"
                  value={theme.body_font_size}
                  onChange={(e) =>
                    handleChange("body_font_size", e.target.value)
                  }
                  placeholder="1rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="body_line_height">Body Line Height</Label>
                <Input
                  id="body_line_height"
                  type="text"
                  value={theme.body_line_height}
                  onChange={(e) =>
                    handleChange("body_line_height", e.target.value)
                  }
                  placeholder="1.5"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="border_radius_sm">Border Radius (Small)</Label>
                <Input
                  id="border_radius_sm"
                  type="text"
                  value={theme.border_radius_sm}
                  onChange={(e) =>
                    handleChange("border_radius_sm", e.target.value)
                  }
                  placeholder="4px"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="border_radius_md">Border Radius (Medium)</Label>
                <Input
                  id="border_radius_md"
                  type="text"
                  value={theme.border_radius_md}
                  onChange={(e) =>
                    handleChange("border_radius_md", e.target.value)
                  }
                  placeholder="8px"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="border_radius_lg">Border Radius (Large)</Label>
                <Input
                  id="border_radius_lg"
                  type="text"
                  value={theme.border_radius_lg}
                  onChange={(e) =>
                    handleChange("border_radius_lg", e.target.value)
                  }
                  placeholder="12px"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="border_radius_xl">
                  Border Radius (Extra Large)
                </Label>
                <Input
                  id="border_radius_xl"
                  type="text"
                  value={theme.border_radius_xl}
                  onChange={(e) =>
                    handleChange("border_radius_xl", e.target.value)
                  }
                  placeholder="16px"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="section_padding">Section Padding</Label>
                <Input
                  id="section_padding"
                  type="text"
                  value={theme.section_padding}
                  onChange={(e) =>
                    handleChange("section_padding", e.target.value)
                  }
                  placeholder="2rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="card_padding">Card Padding</Label>
                <Input
                  id="card_padding"
                  type="text"
                  value={theme.card_padding}
                  onChange={(e) => handleChange("card_padding", e.target.value)}
                  placeholder="1.5rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="button_padding">Button Padding</Label>
                <Input
                  id="button_padding"
                  type="text"
                  value={theme.button_padding}
                  onChange={(e) =>
                    handleChange("button_padding", e.target.value)
                  }
                  placeholder="0.75rem 1.5rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="max_width">Max Width</Label>
                <Input
                  id="max_width"
                  type="text"
                  value={theme.max_width}
                  onChange={(e) => handleChange("max_width", e.target.value)}
                  placeholder="1200px"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="container_padding">Container Padding</Label>
                <Input
                  id="container_padding"
                  type="text"
                  value={theme.container_padding}
                  onChange={(e) =>
                    handleChange("container_padding", e.target.value)
                  }
                  placeholder="1rem"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="gradient_start">Gradient Start</Label>
                <Input
                  id="gradient_start"
                  type="text"
                  value={theme.gradient_start}
                  onChange={(e) =>
                    handleChange("gradient_start", e.target.value)
                  }
                  placeholder=""
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="gradient_end">Gradient End</Label>
                <Input
                  id="gradient_end"
                  type="text"
                  value={theme.gradient_end}
                  onChange={(e) => handleChange("gradient_end", e.target.value)}
                  placeholder=""
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="shadow_color">Shadow Color</Label>
                <Input
                  id="shadow_color"
                  type="text"
                  value={theme.shadow_color}
                  onChange={(e) => handleChange("shadow_color", e.target.value)}
                  placeholder=""
                />
              </div>
            </div>
          </TabsContent>

          <TabsContent value="advanced">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="custom_css">Custom CSS</Label>
                <textarea
                  id="custom_css"
                  value={theme.custom_css || ""}
                  onChange={(e) => handleChange("custom_css", e.target.value)}
                  className="w-full h-32 p-2 border rounded-md font-mono text-sm"
                  placeholder="/* Add your custom CSS here */"
                />
              </div>
            </div>
          </TabsContent>
        </Tabs>

        <div className="mt-6 p-4 border rounded-md">
          <h3 className="text-lg font-medium mb-2">Preview</h3>
          <div
            className="p-4 rounded-md"
            style={{
              backgroundColor:
                theme.primary_bg_color as React.CSSProperties["backgroundColor"],
              color: theme.primary_text_color as React.CSSProperties["color"],
              fontFamily:
                theme.font_family as React.CSSProperties["fontFamily"],
              borderRadius:
                theme.border_radius_sm as React.CSSProperties["borderRadius"],
            }}
          >
            <h1
              style={{
                color: theme.header_text_color as React.CSSProperties["color"],
              }}
            >
              Sample Heading
            </h1>
            <p>
              This is how your text will look with the current theme settings.
            </p>
            <button
              className="px-4 py-2 mt-2 rounded-md"
              style={{
                backgroundColor:
                  theme.primary_button_bg as React.CSSProperties["backgroundColor"],
                color:
                  theme.primary_button_text as React.CSSProperties["color"],
                borderRadius:
                  theme.border_radius_sm as React.CSSProperties["borderRadius"],
              }}
            >
              Sample Button
            </button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
